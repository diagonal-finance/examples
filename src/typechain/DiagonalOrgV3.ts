/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from 'ethers/lib/utils'
import type ethers from 'ethers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type ChargeStruct = {
  id: PromiseOrValue<BytesLike>
  source: PromiseOrValue<string>
  token: PromiseOrValue<string>
  amount: PromiseOrValue<BigNumberish>
}

export type ChargeStructOutput = [string, string, string, BigNumber] & {
  id: string
  source: string
  token: string
  amount: BigNumber
}

export type SignatureStruct = {
  v: PromiseOrValue<BigNumberish>
  r: PromiseOrValue<BytesLike>
  s: PromiseOrValue<BytesLike>
}

export type SignatureStructOutput = [number, string, string] & {
  v: number
  r: string
  s: string
}

export type ChargeBatchStruct = {
  id: PromiseOrValue<BytesLike>
  sources: PromiseOrValue<string>[]
  tokens: PromiseOrValue<string>[]
  amounts: PromiseOrValue<BigNumberish>[]
}

export type ChargeBatchStructOutput = [
  string,
  string[],
  string[],
  BigNumber[],
] & {
  id: string
  sources: string[]
  tokens: string[]
  amounts: BigNumber[]
}

export type WithdrawalStruct = {
  id: PromiseOrValue<BytesLike>
  token: PromiseOrValue<string>
  amount: PromiseOrValue<BigNumberish>
  fee: PromiseOrValue<BigNumberish>
}

export type WithdrawalStructOutput = [string, string, BigNumber, BigNumber] & {
  id: string
  token: string
  amount: BigNumber
  fee: BigNumber
}

export interface DiagonalOrgV3Interface extends utils.Interface {
  functions: {
    'HASHED_NAME()': FunctionFragment
    'HASHED_VERSION()': FunctionFragment
    'TOKEN_FEE_RECIPIENT()': FunctionFragment
    'TYPE_HASH()': FunctionFragment
    'charge((bytes32,address,address,uint256),(uint8,bytes32,bytes32))': FunctionFragment
    'chargeBatch((bytes32,address[],address[],uint256[]),(uint8,bytes32,bytes32))': FunctionFragment
    'chargeNonces(address)': FunctionFragment
    'chargeWithPermit((bytes32,address,address,uint256),(uint8,bytes32,bytes32),bytes)': FunctionFragment
    'domainSeparator()': FunctionFragment
    'initialize(address,address,address)': FunctionFragment
    'isBot(address)': FunctionFragment
    'nonce()': FunctionFragment
    'owner()': FunctionFragment
    'receiver()': FunctionFragment
    'signer()': FunctionFragment
    'updateOwner(address,(uint8,bytes32,bytes32))': FunctionFragment
    'updateReceiver(address,(uint8,bytes32,bytes32))': FunctionFragment
    'updateSigner(address,(uint8,bytes32,bytes32))': FunctionFragment
    'withdraw((bytes32,address,uint256,uint256),(uint8,bytes32,bytes32))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'HASHED_NAME'
      | 'HASHED_VERSION'
      | 'TOKEN_FEE_RECIPIENT'
      | 'TYPE_HASH'
      | 'charge'
      | 'chargeBatch'
      | 'chargeNonces'
      | 'chargeWithPermit'
      | 'domainSeparator'
      | 'initialize'
      | 'isBot'
      | 'nonce'
      | 'owner'
      | 'receiver'
      | 'signer'
      | 'updateOwner'
      | 'updateReceiver'
      | 'updateSigner'
      | 'withdraw',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'HASHED_NAME',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'HASHED_VERSION',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'TOKEN_FEE_RECIPIENT',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'TYPE_HASH', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'charge',
    values: [ChargeStruct, SignatureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'chargeBatch',
    values: [ChargeBatchStruct, SignatureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'chargeNonces',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'chargeWithPermit',
    values: [ChargeStruct, SignatureStruct, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'domainSeparator',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'isBot',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'nonce', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'receiver', values?: undefined): string
  encodeFunctionData(functionFragment: 'signer', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'updateOwner',
    values: [PromiseOrValue<string>, SignatureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'updateReceiver',
    values: [PromiseOrValue<string>, SignatureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'updateSigner',
    values: [PromiseOrValue<string>, SignatureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [WithdrawalStruct, SignatureStruct],
  ): string

  decodeFunctionResult(functionFragment: 'HASHED_NAME', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'HASHED_VERSION',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'TOKEN_FEE_RECIPIENT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'TYPE_HASH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'charge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'chargeBatch', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'chargeNonces',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'chargeWithPermit',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'domainSeparator',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isBot', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'receiver', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'signer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateReceiver',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateSigner',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'OwnerUpdated(address)': EventFragment
    'ReceiverUpdated(address)': EventFragment
    'SignerUpdated(address)': EventFragment
    'WithdrawSuccessful(address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReceiverUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SignerUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawSuccessful'): EventFragment
}

export interface OwnerUpdatedEventObject {
  newAdmin: string
}
export type OwnerUpdatedEvent = TypedEvent<[string], OwnerUpdatedEventObject>

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>

export interface ReceiverUpdatedEventObject {
  newReceiver: string
}
export type ReceiverUpdatedEvent = TypedEvent<
  [string],
  ReceiverUpdatedEventObject
>

export type ReceiverUpdatedEventFilter = TypedEventFilter<ReceiverUpdatedEvent>

export interface SignerUpdatedEventObject {
  newSigner: string
}
export type SignerUpdatedEvent = TypedEvent<[string], SignerUpdatedEventObject>

export type SignerUpdatedEventFilter = TypedEventFilter<SignerUpdatedEvent>

export interface WithdrawSuccessfulEventObject {
  token: string
  receiver: string
  amount: BigNumber
  fee: BigNumber
}
export type WithdrawSuccessfulEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawSuccessfulEventObject
>

export type WithdrawSuccessfulEventFilter =
  TypedEventFilter<WithdrawSuccessfulEvent>

export interface DiagonalOrgV3 extends BaseContract {
  connect(signerOrProvider: Signer | ethers.providers.Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: DiagonalOrgV3Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<ethers.providers.Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    HASHED_NAME(overrides?: CallOverrides): Promise<[string]>

    HASHED_VERSION(overrides?: CallOverrides): Promise<[string]>

    TOKEN_FEE_RECIPIENT(overrides?: CallOverrides): Promise<[string]>

    TYPE_HASH(overrides?: CallOverrides): Promise<[string]>

    charge(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    chargeBatch(
      chargeRequest: ChargeBatchStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    chargeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    chargeWithPermit(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    domainSeparator(
      overrides?: CallOverrides,
    ): Promise<[string] & { separator: string }>

    initialize(
      _owner: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isBot(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    receiver(overrides?: CallOverrides): Promise<[string]>

    signer(overrides?: CallOverrides): Promise<[string]>

    updateOwner(
      newOwner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateReceiver(
      newReceiver: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateSigner(
      newSigner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    withdraw(
      withdrawRequest: WithdrawalStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  HASHED_NAME(overrides?: CallOverrides): Promise<string>

  HASHED_VERSION(overrides?: CallOverrides): Promise<string>

  TOKEN_FEE_RECIPIENT(overrides?: CallOverrides): Promise<string>

  TYPE_HASH(overrides?: CallOverrides): Promise<string>

  charge(
    chargeRequest: ChargeStruct,
    signature: SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  chargeBatch(
    chargeRequest: ChargeBatchStruct,
    signature: SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  chargeNonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  chargeWithPermit(
    chargeRequest: ChargeStruct,
    signature: SignatureStruct,
    permit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  domainSeparator(overrides?: CallOverrides): Promise<string>

  initialize(
    _owner: PromiseOrValue<string>,
    _signer: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isBot(
    bot: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  nonce(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  receiver(overrides?: CallOverrides): Promise<string>

  updateOwner(
    newOwner: PromiseOrValue<string>,
    signature: SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateReceiver(
    newReceiver: PromiseOrValue<string>,
    signature: SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateSigner(
    newSigner: PromiseOrValue<string>,
    signature: SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  withdraw(
    withdrawRequest: WithdrawalStruct,
    signature: SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    HASHED_NAME(overrides?: CallOverrides): Promise<string>

    HASHED_VERSION(overrides?: CallOverrides): Promise<string>

    TOKEN_FEE_RECIPIENT(overrides?: CallOverrides): Promise<string>

    TYPE_HASH(overrides?: CallOverrides): Promise<string>

    charge(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    chargeBatch(
      chargeRequest: ChargeBatchStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    chargeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    chargeWithPermit(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      permit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    domainSeparator(overrides?: CallOverrides): Promise<string>

    initialize(
      _owner: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    isBot(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    nonce(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    receiver(overrides?: CallOverrides): Promise<string>

    signer(overrides?: CallOverrides): Promise<string>

    updateOwner(
      newOwner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    updateReceiver(
      newReceiver: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    updateSigner(
      newSigner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    withdraw(
      withdrawRequest: WithdrawalStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'OwnerUpdated(address)'(
      newAdmin?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter
    OwnerUpdated(
      newAdmin?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter

    'ReceiverUpdated(address)'(
      newReceiver?: PromiseOrValue<string> | null,
    ): ReceiverUpdatedEventFilter
    ReceiverUpdated(
      newReceiver?: PromiseOrValue<string> | null,
    ): ReceiverUpdatedEventFilter

    'SignerUpdated(address)'(
      newSigner?: PromiseOrValue<string> | null,
    ): SignerUpdatedEventFilter
    SignerUpdated(
      newSigner?: PromiseOrValue<string> | null,
    ): SignerUpdatedEventFilter

    'WithdrawSuccessful(address,address,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
    ): WithdrawSuccessfulEventFilter
    WithdrawSuccessful(
      token?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
    ): WithdrawSuccessfulEventFilter
  }

  estimateGas: {
    HASHED_NAME(overrides?: CallOverrides): Promise<BigNumber>

    HASHED_VERSION(overrides?: CallOverrides): Promise<BigNumber>

    TOKEN_FEE_RECIPIENT(overrides?: CallOverrides): Promise<BigNumber>

    TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>

    charge(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    chargeBatch(
      chargeRequest: ChargeBatchStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    chargeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    chargeWithPermit(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _owner: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isBot(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    nonce(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    receiver(overrides?: CallOverrides): Promise<BigNumber>

    signer(overrides?: CallOverrides): Promise<BigNumber>

    updateOwner(
      newOwner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateReceiver(
      newReceiver: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateSigner(
      newSigner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    withdraw(
      withdrawRequest: WithdrawalStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    HASHED_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    HASHED_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TOKEN_FEE_RECIPIENT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    charge(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    chargeBatch(
      chargeRequest: ChargeBatchStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    chargeNonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    chargeWithPermit(
      chargeRequest: ChargeStruct,
      signature: SignatureStruct,
      permit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _owner: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isBot(
      bot: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateOwner(
      newOwner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateReceiver(
      newReceiver: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateSigner(
      newSigner: PromiseOrValue<string>,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    withdraw(
      withdrawRequest: WithdrawalStruct,
      signature: SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
